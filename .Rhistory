body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
school.data <- rbind(school.data, page.data) #merging the current state data with the current page data
}
return(school.data)
}
GetData("WA")
library(jsonlite)
library(httr)
library(dplyr)
source("api_key.R")
# https://api.data.gov/ed/collegescorecard/v1/schools?api_key=fDjxnzknPKeKvMcOlzCAb6aK3IhayEClNrqG4zxF&fields=school.name,school.state,school.city,location.lat,location.lon,2015.admissions.admission_rate.overall,2015.academics.program.bachelors.library,2015.student.share_firstgeneration&sort=school.name
GetData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name,school.state,school.city,location.lat,location.lon")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
school.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
all.data <- paste0("school.name,school.state,school.city,location.lat,location.lon,",
input.year, ".admissions.admission_rate.overall,",
input.year, ".academics.program.bachelors.library,",
input.year, ".student.share_firstgeneration")
query.params$fields <- paste(all.data)
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
school.data <- rbind(school.data, page.data) #merging the current state data with the current page data
}
return(school.data)
}
school.info <- GetData("2015")
View(school.info)
View(school.info)
View(school.info)
library(shiny)
library(plotly)
library(dplyr)
library(RColorBrewer)
source("./scripts/financial.R")
source("./scripts/ethnicity.R")
source("./scripts/overview_map.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#Financial Data Table
output$finTable <- renderDataTable(GetFinData(input$year))
#Map of Schools
output$map <- renderPlotly {(
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray25"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot.interactive.map <- plot_geo(school.info, lat = ~location.lat, lon = ~location.lng) %>%
add_markers(
text = ~paste(date, paste('School Name:', school.name), paste('City:', school.city), paste('Acceptance Rate:', 2015.admissions._rate.overall), paste('First Generation Student Percentage:', 2015.student.share_firstgeneration), sep = "<br />"),
color = ~acceptancerate, symbol = I("square"), size = I(4), hoverinfo = "text"
) %>%
colorbar(title = "Acceptance Rate") %>%
layout(
title = 'Colleges Across the Country<br />(Hover For More Info)', geo = g
)
)}
output$piechart <- renderPlotly({
pie.data <- GetRaceData(input$year) %>%
filter(school.name == input$school)
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(12, "Set3"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
library(shiny)
library(plotly)
library(dplyr)
library(RColorBrewer)
source("./scripts/financial.R")
source("./scripts/ethnicity.R")
source("./scripts/overview_map.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#Financial Data Table
output$finTable <- renderDataTable(GetFinData(input$year))
#Map of Schools
output$map <- renderPlotly {(
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray25"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot.interactive.map <- plot_geo(school.info, lat = ~location.lat, lon = ~location.lng) %>%
add_markers(
text = ~paste(date, paste('School Name:', school.name), paste('City:', school.city), paste('Acceptance Rate:', 2015.admissions._rate.overall), paste('First Generation Student Percentage:', 2015.student.share_firstgeneration), sep = "<br />"),
color = ~acceptancerate, symbol = I("square"), size = I(4), hoverinfo = "text"
) %>%
colorbar(title = "Acceptance Rate") %>%
layout(
title = 'Colleges Across the Country<br />(Hover For More Info)', geo = g
)
)}
output$piechart <- renderPlotly({
pie.data <- GetRaceData(input$year) %>%
filter(school.name == input$school)
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(12, "Set3"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
library(shiny)
library(plotly)
library(dplyr)
library(RColorBrewer)
source("./scripts/financial.R")
source("./scripts/ethnicity.R")
source("./scripts/overview_map.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#Financial Data Table
output$finTable <- renderDataTable(GetFinData(input$year))
#Map of Schools
output$map <- renderPlotly {(
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray25"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot.interactive.map <- plot_geo(school.info, lat = ~location.lat, lon = ~location.lng) %>%
add_markers(
text = ~paste(paste('School Name:', school.name), paste('City:', school.city), paste('Acceptance Rate:', 2015.admissions._rate.overall), paste('First Generation Student Percentage:', 2015.student.share_firstgeneration), sep = "<br />"),
color = ~acceptancerate, symbol = I("square"), size = I(4), hoverinfo = "text"
) %>%
colorbar(title = "Acceptance Rate") %>%
layout(
title = 'Colleges Across the Country<br />(Hover For More Info)', geo = g
)
)}
output$piechart <- renderPlotly({
pie.data <- GetRaceData(input$year) %>%
filter(school.name == input$school)
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(12, "Set3"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
View(school.info)
library(shiny)
library(plotly)
library(dplyr)
library(RColorBrewer)
source("./scripts/financial.R")
source("./scripts/ethnicity.R")
source("./scripts/overview_map.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#Financial Data Table
output$finTable <- renderDataTable(GetFinData(input$year))
#Map of Schools
output$map <- renderPlotly {(
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray25"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot.interactive.map <- plot_geo(school.info, lat = ~location.lat, lon = ~location.lon) %>%
add_markers(
text = ~paste(paste('School Name:', school.name), paste('City:', school.city), paste('Acceptance Rate:', 2015.admissions_rate.overall), paste('First Generation Student Percentage:', 2015.student.share_firstgeneration), sep = "<br />"),
color = ~2015.student.share_firstgeneration, symbol = I("square"), size = I(4), hoverinfo = "text"
) %>%
colorbar(title = "Acceptance Rate") %>%
layout(
title = 'Colleges Across the Country<br />(Hover For More Info)', geo = g
)
)}
output$piechart <- renderPlotly({
pie.data <- GetRaceData(input$year) %>%
filter(school.name == input$school)
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(12, "Set3"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
source("./scripts/overview_map.R")
source("./scripts/ethnicity.R")
source("./scripts/financial.R")
source("./scripts/overview_map.R")
library('dplyr')
library('plotly')
setwd("~/Desktop/Info201/a6-markdavidrs")
#store mass shootings data to a dataframe
mass.shootings.2017 <- read.csv("data/shootings-2017.csv")
#total number of shootings occured
total.number.of.shootings <- nrow(mass.shootings.2017)
#total number of lives lost
total.lives.lost <- sum(mass.shootings.2017$killed)
#most impacted city (determined by highest number of lives lost and injured )
impacted.cities.data<- mass.shootings.2017 %>%
group_by(city) %>%
mutate(
sum.lives.lost = sum(killed),
sum.injured = sum(injured),
combined.sums = sum.lives.lost + sum.injured
) %>%
arrange(-combined.sums)
most.impacted <- impacted.cities.data[1,]
second.most.impacted <- impacted.cities.data[2,]
name.most.impacted <- most.impacted$city
name.second.most.impacted <- second.most.impacted$city
combined.sum.most <- most.impacted$combined.sums
combined.sum.second.most <- second.most.impacted$combined.sums
#number of unique cities
unique.cities <- mass.shootings.2017 %>%
select(city) %>%
distinct %>%
nrow
unique.states <- mass.shootings.2017 %>%
select(state) %>%
distinct %>%
nrow
#specific incident details
specific.incident <- filter(mass.shootings.2017, injured == '441')
specific.incident.date <- specific.incident$date
specific.incident.city <- specific.incident$city
specific.incident.state <- specific.incident$state
specific.incident.injured <- specific.incident$injured
specific.incident.killed <- specific.incident$killed
#count number of shottings per state
state.occurances <- mass.shootings.2017 %>%
select(state) %>%
group_by(state) %>%
mutate(occurences = n()) %>%
distinct
#data tweaking for map
adjusted.mass.shootings.2017 <- mass.shootings.2017 %>%
mutate(casualties = injured + killed)
#summary table
summary.mass.shootings <- adjusted.mass.shootings.2017 %>%
select(state, injured, killed, casualties) %>%
group_by(state) %>%
mutate(
injured = sum(injured),
killed = sum(killed),
casualties = sum(casualties)
) %>%
distinct %>%
arrange(-casualties)
colnames(summary.mass.shootings) <- c('State', 'Individuals Injured', 'Individuals Killed', 'Total Casualties')
#making the interaactive map
library('plotly')
packageVersion('plotly')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray25"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot.interactive.map <- plot_geo(adjusted.mass.shootings.2017, lat = ~lat, lon = ~lng) %>%
add_markers(
text = ~paste(date, paste('City:', city), paste('State:', state), paste('Injured:', injured), paste('Killed:', killed), paste('Casualties:', casualties), sep = "<br />"),
color = ~casualties, symbol = I("square"), size = I(6), hoverinfo = "text"
) %>%
colorbar(title = "Number of Casualties per incident") %>%
layout(
title = 'Mass Shootings on U.S soil in 2017<br />(Hover For More Info)', geo = g
)
#making interactive bar plot
bar.plot <- plot_ly(data = state.occurances, x = ~state, y = ~occurences,
marker = list(size = 10,
color = 'rgba(253, 188, 191, .7)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(title = 'Number of Mass Shootings in Reported States',
yaxis = list(zeroline = FALSE),
plotxaxis = list(zeroline = FALSE),
margin = list(b = 170),
xaxis = list(tickangle = 45))
View(mass.shootings.2017)
library(shiny)
library(plotly)
library(dplyr)
library(RColorBrewer)
source("./scripts/financial.R")
source("./scripts/ethnicity.R")
source("./scripts/overview_map.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#Financial Data Table
output$finTable <- renderDataTable(GetFinData(input$year))
#Map of Schools
output$map <- renderPlotly {(
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray25"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
plot.interactive.map <- plot_geo(school.info, lat = ~location.lat, lon = ~location.lon) %>%
add_markers(
text = ~paste(paste('School Name:', school.name), paste('City:', school.city), paste('Acceptance Rate:', 2015.admissions_rate.overall), paste('First Generation Student Percentage:', 2015.student.share_firstgeneration), sep = "<br />"),
color = ~2015.student.share_firstgeneration, symbol = I("square"), size = I(4), hoverinfo = "text"
) %>%
colorbar(title = "Acceptance Rate") %>%
layout(
title = 'Colleges Across the Country<br />(Hover For More Info)', geo = g
)
)}
output$piechart <- renderPlotly({
pie.data <- GetRaceData(input$year) %>%
filter(school.name == input$school)
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(12, "Set3"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
runApp('~/Desktop/Info201/info201-ab5')
runApp('~/Desktop/Info201/info201-ab5')
setwd("~/Desktop/Info201/info201-ab5")
runApp()
runApp()
runApp()
school.info <- school.info %>%
mutate(2015.admissions.admission_rate.overall = 2015.admissions.admission_rate.overall * 100,
2015.student.share_firstgeneration = 2015.student.share_firstgeneration * 100)
View(school.info)
school.info <- school.info %>%
mutate(`2015.student.share_firstgeneration` = `2015.student.share_firstgeneration` * 100)
View(school.info)
school.info <- school.info %>%
mutate(`2015.student.share_firstgeneration` = `2015.student.share_firstgeneration` * 100,
`2015.admissions.admission_rate.overall` = `2015.admissions.admission_rate.overall` * 100)
library(jsonlite)
library(httr)
library(dplyr)
source("api_key.R")
# https://api.data.gov/ed/collegescorecard/v1/schools?api_key=fDjxnzknPKeKvMcOlzCAb6aK3IhayEClNrqG4zxF&fields=school.name,school.state,school.city,location.lat,location.lon,2015.admissions.admission_rate.overall,2015.academics.program.bachelors.library,2015.student.share_firstgeneration&sort=school.name
GetData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name,school.state,school.city,location.lat,location.lon")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
school.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
all.data <- paste0("school.name,school.state,school.city,location.lat,location.lon,",
input.year, ".admissions.admission_rate.overall,",
input.year, ".academics.program.bachelors.library,",
input.year, ".student.share_firstgeneration")
query.params$fields <- paste(all.data)
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
school.data <- rbind(school.data, page.data) #merging the current state data with the current page data
}
return(school.data)
}
school.info <- GetData("2015")
View(school.info)
school.info <- school.info %>%
mutate(`2015.student.share_firstgeneration` = round(`2015.student.share_firstgeneration` * 100, digits = 2),
`2015.admissions.admission_rate.overall` = round(`2015.admissions.admission_rate.overall` * 100, digits = 2))
View(school.info)
school.info <- school.info %>%
mutate(`2015.student.share_firstgeneration` = `2015.student.share_firstgeneration` * 100,
`2015.admissions.admission_rate.overall` = `2015.admissions.admission_rate.overall` * 100)
View(school.info)
library(shiny)
library(plotly)
library(dplyr)
library(RColorBrewer)
source("./scripts/financial.R")
source("./scripts/ethnicity.R")
#source("./scripts/overview_map.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#Financial Data Table
output$finTable <- renderDataTable(GetFinData(input$year))
# #Map of Schools
# output$map <- renderPlotly ({
#
#   g <- list(
#     scope = 'usa',
#     projection = list(type = 'albers usa'),
#     showland = TRUE,
#     landcolor = toRGB("gray95"),
#     subunitcolor = toRGB("gray25"),
#     countrycolor = toRGB("gray85"),
#     countrywidth = 0.5,
#     subunitwidth = 0.5
#     )
#
#   plot.interactive.map <- plot_geo(school.info, lat = ~location.lat, lon = ~location.lon) %>%
#     add_markers(
#       text = ~paste(paste('School Name:', school.name), paste('City:', school.city), paste('Acceptance Rate:', 2015.admissions_rate.overall), paste('First Generation Student Percentage:', 2015.student.share_firstgeneration), sep = "<br />"),
#       color = ~2015.student.share_firstgeneration, symbol = I("square"), size = I(4), hoverinfo = "text"
#     ) %>%
#     colorbar(title = "Acceptance Rate") %>%
#     layout(
#       title = 'Colleges Across the Country<br />(Hover For More Info)', geo = g
#     )
# })
#
output$piechart <- renderPlotly({
pie.data <- GetRaceData(input$year) %>%
filter(school.name == input$school)
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(12, "Set3"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
library(jsonlite)
library(httr)
library(dplyr)
source("api_key.R")
# https://api.data.gov/ed/collegescorecard/v1/schools?api_key=fDjxnzknPKeKvMcOlzCAb6aK3IhayEClNrqG4zxF&fields=school.name,school.state,school.city,location.lat,location.lon,2015.admissions.admission_rate.overall,2015.academics.program.bachelors.library,2015.student.share_firstgeneration&sort=school.name
GetData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name,school.state,school.city,location.lat,location.lon")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
school.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
all.data <- paste0("school.name,school.state,school.city,location.lat,location.lon,",
input.year, ".admissions.admission_rate.overall,",
input.year, ".academics.program.bachelors.library,",
input.year, ".student.share_firstgeneration")
query.params$fields <- paste(all.data)
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
school.data <- rbind(school.data, page.data) #merging the current state data with the current page data
}
return(school.data)
}
school.info <- GetData("2015")
school.info <- school.info %>%
mutate(`2015.student.share_firstgeneration` = `2015.student.share_firstgeneration` * 100,
`2015.admissions.admission_rate.overall` = `2015.admissions.admission_rate.overall` * 100)
View(school.info)
runApp()
