x <-2
hours.in.a.week <- 24 * 7
name <- "jody"
hometown <-the tuk (tukwila)
hometown <- "the tuk (tukwila,WA)"
my.name <- "Jody"
my.height <- "5'4""
""
my.height <- "5'4"
puppies <- 2
puppy.price <- a G ($1000)
puppy.price <- $1000
puppy.price <- "a G ($1000)"
total.cost <- "$2000"
puppy.price
ten
ten
ten
AddThree <- function (input) {
answer <- input + 3
return(answer)
}
ten <- AddThree(7)
ten
answer <- f / 0.3048
answer <- feet / 0.3048
answer <- feet * 0.3048
FeetToMeters <- function(feet) {
answer <- feet * 0.3048
return(answer)
}
FeetToMeters(1)
FeetToMeters(5)
height.in.feet <- 5
height.in.meters <- FeetToMeters(height.in.feet)
height.in.meters
setwd("~/Downloads/INFO201/info201-ab5")
api.key <- "vt0a8p2WPxbldiZD4QipQNjFsCLAQH2ZA5USPUQd"
library(shiny)
library(plotly)
my.ui <- navbarPage(
# Application Title
"College Data",
tabPanel("Home",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Map",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Race/Ethnicity in Washington",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Financial Data in Washington",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
)
)
shinyUI(my.ui)
library(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
library(jsonlite)
library(httr)
library(dplyr)
source("api_key.R")
GetData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
api.key <- "vt0a8p2WPxbldiZD4QipQNjFsCLAQH2ZA5USPUQd"
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
first.data<-  for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
gen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
GetData <- function(input.school) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
GetData(seattle)
GetData(university of washington)
GetData(washington)
GetData <- function(input.location) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
GetData(Washington)
GetData <- function(input.state) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
GetData("Washington")
