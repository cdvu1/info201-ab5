<<<<<<< HEAD
x <-2
hours.in.a.week <- 24 * 7
name <- "jody"
hometown <-the tuk (tukwila)
hometown <- "the tuk (tukwila,WA)"
my.name <- "Jody"
my.height <- "5'4""
""
my.height <- "5'4"
puppies <- 2
puppy.price <- a G ($1000)
puppy.price <- $1000
puppy.price <- "a G ($1000)"
total.cost <- "$2000"
puppy.price
ten
ten
ten
AddThree <- function (input) {
answer <- input + 3
return(answer)
}
ten <- AddThree(7)
ten
answer <- f / 0.3048
answer <- feet / 0.3048
answer <- feet * 0.3048
FeetToMeters <- function(feet) {
answer <- feet * 0.3048
return(answer)
}
FeetToMeters(1)
FeetToMeters(5)
height.in.feet <- 5
height.in.meters <- FeetToMeters(height.in.feet)
height.in.meters
setwd("~/Downloads/INFO201/info201-ab5")
api.key <- "vt0a8p2WPxbldiZD4QipQNjFsCLAQH2ZA5USPUQd"
library(shiny)
library(plotly)
=======
loud.intro
quiet.intro
capitalized
occurences
minutes.in.a.day
minutes.in.two.days
ThirdPower
ThirdPower(3)
ThirdPower(4)
twenty.seven
movies
top.three
without.four
numbers
len
numbers.mean
numbers.median
lower.numbers
all.numbers
today
winter.break
days.to.break
MakeBirthdayIntro <- function(name, age, upcoming.bday) {
new.age <- age + 1
days <- as.Date(upcoming.bday) - today
return(paste(MakeIntroduction(name, age), '. In', as.Date(upcoming.bday) - today, 'days I\'ll be', age + 1, '.'))
}
my.bday.intro <- MakeBirthdayIntro('Cecilia', 21, '2018-09-25')
my.bday.intro
return(paste0(MakeIntroduction(name, age), '. In', as.Date(upcoming.bday) - today, ' days I\'ll be ', age + 1, '.'))
MakeBirthdayIntro <- function(name, age, upcoming.bday) {
new.age <- age + 1
days <- as.Date(upcoming.bday) - today
return(paste0(MakeIntroduction(name, age), '. In', as.Date(upcoming.bday) - today, ' days I\'ll be ', age + 1, '.'))
}
my.bday.intro <- MakeBirthdayIntro('Cecilia', 21, '2018-09-25')
my.bday.intro
MakeBirthdayIntro <- function(name, age, upcoming.bday) {
new.age <- age + 1
days <- as.Date(upcoming.bday) - today
return(paste0(MakeIntroduction(name, age), '. In ', as.Date(upcoming.bday) - today, ' days I\'ll be ', age + 1, '.'))
}
my.bday.intro <- MakeBirthdayIntro('Cecilia', 21, '2018-09-25')
my.bday.intro
MakeBirthdayIntro <- function(name, age, bday) {
days <- as.Date(bday) - today
return(paste0(MakeIntroduction(name, age), '. In ', days, ' days I\'ll be ', age + 1, '.'))
}
MakeBirthdayIntro <- function(name, age, bday) {
return(paste0(MakeIntroduction(name, age), '. In ', as.Date(bday) - today, ' days I\'ll be ', age + 1, '.'))
}
my.bday.intro <- MakeBirthdayIntro('Cecilia', 21, '2018-09-25')
my.bday.intro <- MakeBirthdayIntro('Cecilia', 21, '2018-09-25')
my.bday.intro
MakeBirthdayIntro <- function(name, age, bday) {
days <- as.Date(bday) - today
intro <- MakeIntroduction(name, age)
return(paste0(intro, '. In ', days, ' days I\'ll be ', age + 1, '.'))
}
my.bday.intro <- MakeBirthdayIntro('Cecilia', 21, '2018-09-25')
my.bday.intro
RemoveDigits <- function(vector) {
return(gsub('[0-9]+', '', vector))
}
remove <- RemoveDigits(c("ASTRO 101", "INFO 201", "ART 123", "PIZZA 666"))
remove
install.packages("httr")
install.packges("jsonlite")
install.packages("jsonlite")
#Financial data of schools in WA
#Family income: line 561ish
#Financial aid: line 777ish
#Table (avg cost of attendance, avg family income, avg financial aid received, avg loans)
library("httr")
library("jsonlite")
library("dplyr")
setwd("~/Documents/FALL17/201/info201-ab5/")
source('api_key.R')
#https://api.data.gov/ed/collegescorecard/v1/schools?api_key=<APIKEYHERE>&fields=school.name&school.state=WA
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
state.data <- fromJSON(content) #extract and parse
View(state.data)
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name,2016.cost.tuition.in_state,2016.cost.tuition.out_of_state", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
state.data <- fromJSON(content) #extract and parse
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
state.data <- fromJSON(content) #extract and parse
total.data <- state.data[1,1]
state.data <- flatten(body.data$results)
body.data <- fromJSON(content) #extract and parse
state.data <- flatten(body.data$results)
View(state.data)
total.data <- body.data$metadata$total
response
total.pages <- total.data / 20
floor
?floor
?trunc
total.pages <- trunc(total.data / 20)
p <- 1
query.params <- list(api_key = api.key, fields = "school.name,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state", school.state = "WA", page = p)
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
state.data <- flatten(body.data$results)
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
View(state.data)
for(p in 2:2) {
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
}
View(page.data)
for(p in 2:2) {
query$page = p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
}
for(p in 2:2) {
query.params$page = p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
}
for(p in 2:total.pages) {
query.params$page = p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data)
}
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
#get total number of pages by dividing total data and num of data per page
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:total.pages) {
query.params$fields <- "school.name,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data)
}
#Financial data of schools in WA
#Family income: line 561ish
#Financial aid: line 777ish
#Table (avg cost of attendance, avg family income, avg financial aid received, avg loans)
library("httr")
library("jsonlite")
library("dplyr")
setwd("~/Documents/FALL17/201/info201-ab5/")
source('api_key.R')
#https://api.data.gov/ed/collegescorecard/v1/schools?api_key=<APIKEYHERE>&fields=school.name,2016.cost.tuition.in_state,2016.cost.tuition.out_of_state&school.state=WA
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
#get total number of pages by dividing total data and num of data per page
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:total.pages) {
query.params$fields <- "school.name,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data)
}
state.data <- data.frame()
#Financial data of schools in WA
#Family income: line 561ish
#Financial aid: line 777ish
#Table (avg cost of attendance, avg family income, avg financial aid received, avg loans)
library("httr")
library("jsonlite")
library("dplyr")
setwd("~/Documents/FALL17/201/info201-ab5/")
source('api_key.R')
#https://api.data.gov/ed/collegescorecard/v1/schools?api_key=<APIKEYHERE>&fields=school.name,2016.cost.tuition.in_state,2016.cost.tuition.out_of_state&school.state=WA
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
state.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:total.pages) {
query.params$fields <- "school.name,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data)
}
shiny::runApp()
runApp()
runApp()
source("scripts/financial.R")
runApp()
runApp()
runApp()
GetData("2015")
runApp()
runApp()
library(DT)
install(DT)
library(DT)
package(DT)
GetData(2015)
runApp()
runApp()
runApp()
package("DT")
install("DT")
?library
library(DT)
install.packages(DT)
install.packages("DT")
library(DT)
runApp()
runApp()
library(iris)
runApp()
runApp()
runApp()
library(shiny)
library(plotly)
library(DT)
>>>>>>> 776fc0c98f5896c22ec35ab89e76e3c3d5bd38e2
my.ui <- navbarPage(
# Application Title
"College Data",
tabPanel("Home",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Map",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Race/Ethnicity in Washington",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Financial Data in Washington",
sidebarLayout(
sidebarPanel(
<<<<<<< HEAD
=======
sliderInput("year",
"Financial data in the year:",
min = 2000,
max = 2015,
value = 2015)
),
mainPanel(
DT::dataTableOutput("financialTable")
)
)
)
)
shinyUI(my.ui)
#Financial data of schools in WA
#Family income: line 561ish
#Financial aid: line 777ish
#Table (avg cost of attendance, avg family income, avg financial aid received, avg loans)
library("httr")
library("jsonlite")
library("dplyr")
setwd("~/Documents/FALL17/201/info201-ab5/")
source('api_key.R')
#https://api.data.gov/ed/collegescorecard/v1/schools?api_key=<APIKEYHERE>&fields=school.name,2016.cost.tuition.in_state,2016.cost.tuition.out_of_state&school.state=WA
GetData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
state.data <- data.frame() #empty dataframe
#get total number of pages by dividing total data and num of data per page
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:total.pages) {
query.params$fields <- "school.name,2015.cost.tuition.in_state,2015.cost.tuition.out_of_state"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data) #merging the current state data with the current page data
}
return(state.data)
}
library(shiny)
library(plotly)
library(DT)
my.ui <- navbarPage(
# Application Title
"College Data",
tabPanel("Home",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Map",
sidebarLayout(
sidebarPanel(
>>>>>>> 776fc0c98f5896c22ec35ab89e76e3c3d5bd38e2
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
<<<<<<< HEAD
)
)
shinyUI(my.ui)
library(shiny)
=======
),
tabPanel("Race/Ethnicity in Washington",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Financial Data in Washington",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Financial data in the year:",
min = 2000,
max = 2015,
value = 2015)
),
mainPanel(
DT::dataTableOutput("financialTable")
)
)
)
)
shinyUI(my.ui)
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(iris)
source("scripts/financial.R")
# Define server logic required to draw a histogram
>>>>>>> 776fc0c98f5896c22ec35ab89e76e3c3d5bd38e2
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
<<<<<<< HEAD
})
library(jsonlite)
library(httr)
library(dplyr)
source("api_key.R")
GetData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
api.key <- "vt0a8p2WPxbldiZD4QipQNjFsCLAQH2ZA5USPUQd"
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
first.data<-  for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
gen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
GetData <- function(input.school) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
GetData(seattle)
GetData(university of washington)
GetData(washington)
GetData <- function(input.location) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
GetData(Washington)
GetData <- function(input.state) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "2015.student.share_firstgeneration")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
firstgen.data <- data.frame()
#get total number of pages by dividing total data and num of data per page
all.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:all.pages) {
query.params$fields <- "2015.student.share_firstgeneration"
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
firstgen.data <- rbind(firstgen.data, page.data) #merging the current state data with the current page data
}
return(firstgen.data)
}
GetData("Washington")
=======
financial.data <- GetData(2015)
output$financialTable <- DT::renderDataTable({
DT::datatable(financial.data)
})
})
library(DT)
library(shiny)
library(plotly)
library(DT)
my.ui <- navbarPage(
# Application Title
"College Data",
tabPanel("Home",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Map",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Race/Ethnicity in Washington",
sidebarLayout(
sidebarPanel(
sliderInput("grams",
"Minimum grams of sugar (g):",
min = -2,
max = 15,
value = 0),
selectInput('colorvar', label = 'Variable to Color', choices = list("Manufacturer" = 'mfr', 'Type' = 'type'))
),
mainPanel(
plotlyOutput('scatter')
)
)
),
tabPanel("Financial Data in Washington",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Financial data in the year:",
min = 2000,
max = 2015,
value = 2015)
),
mainPanel(
DT::dataTableOutput("financialTable")
)
)
)
)
shinyUI(my.ui)
runApp()
runApp()
financial.data <- GetData(2015)
View(financial.data)
runApp()
runApp()
>>>>>>> 776fc0c98f5896c22ec35ab89e76e3c3d5bd38e2
