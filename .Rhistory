BuildScatter(iris, "sepal.Length", "Petal.Width", "Species", title="Iris Plot")
source("./scripts/BuildScatter.R")
install.packages(janeausten)
install.packages(janeaustenr)
install.packages("janeaustenr")
library(janeaustenr)
books <- austen.books()
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(janeaustenr)
library(tidytext)
install.packages("tidytext")
library(dplyr)
library(stringr)
library(ggplot2)
num.books <- length(unique(books$book))
books <- austen.books()
books <- austen_books()
num.books <- length(unique(books$book))
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(line = max(lines)) %>%
select(book)
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(line == max(lines)) %>%
select(book)
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(lines == max(lines)) %>%
select(book)
common.words <- word.list %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
word.list <- books %>%
unnest_tokens(word, text)
install.packages("janeaustenr")
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
books <- austen_books()
num.books <- length(unique(books$book))
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(lines == max(lines)) %>%
select(book)
word.list <- books %>%
unnest_tokens(word, text)
common.words <- word.list %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
View(word.list)
View(word.list)
View(common.words)
View(common.words)
no.stop.words <- all.words %>%
anti_join(stop_words, by = 'word')
no.stop.words <- all.words %>%
anti_join(stop_words, by = 'word')
all.words <- word.list %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
no.stop.words <- all.words %>%
anti_join(stop_words, by = 'word')
View(no.stop.words)
View(no.stop.words)
no.stop.words %>%
filter(count > 500) %>%
mutate(word = reorder(word,count)) %>%
ggplot(aes(word, count)) +
geom_col() +
coord_flip()
no.stop.words
shiny::runApp('INFO201/a8-rachelvuu')
shiny::runApp('INFO201/info201-ab5')
runApp('INFO201/info201-ab5')
runApp('INFO201/info201-ab5')
state.data[order(df$school.name),]
state.data.sorted <- state.data[order(df$school.name),]
state.data[order(state.data$school.name),]
View(state.data)
View(state.data)
library(jsonlite)
library(dplyr)
library(httr)
# setwd("~/INFO201/info201-ab5")
source('api_key.R')
# Ethnicity Pie Chart for Schools in WA State
# 546-552
# Widgets: school drop-down, year slider
GetRaceData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
state.data <- data.frame() #empty dataframe
#get total number of pages by dividing total data and num of data per page
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:total.pages) {
query.params$fields <- paste0("school.name,",
input.year, ".student.demographics.race_ethnicity.white,",
input.year, ".student.demographics.race_ethnicity.black,",
input.year, ".student.demographics.race_ethnicity.hispanic,",
input.year, ".student.demographics.race_ethnicity.asian,",
input.year, ".student.demographics.race_ethnicity.aian,",
input.year, ".student.demographics.race_ethnicity.nhpi,",
input.year, ".student.demographics.race_ethnicity.two_or_more,",
input.year, ".student.demographics.race_ethnicity.non_resident_alien,",
input.year, ".student.demographics.race_ethnicity.unknown,",
input.year, ".student.demographics.race_ethnicity.white_non_hispanic,",
input.year, ".student.demographics.race_ethnicity.black_non_hispanic,",
input.year, ".student.demographics.race_ethnicity.asian_pacific_islander"
)
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data) #merging the current state data with the current page data
}
return(state.data)
}
state.data <- GetData(2015)
state.data[order(state.data$school.name),]
state.data.sort <- state.data[order(state.data$school.name),]
View(state.data.sort)
View(state.data.sort)
state.data <- arrange(state.data, school.name)
runApp('INFO201/info201-ab5')
runApp('INFO201/info201-ab5')
View(state.data.sort)
View(state.data.sort)
runApp('INFO201/info201-ab5')
runApp('INFO201/info201-ab5')
shiny::runApp('INFO201/info201-ab5')
GetRaceData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
state.data <- data.frame() #empty dataframe
#get total number of pages by dividing total data and num of data per page
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:total.pages) {
query.params$fields <- paste0("school.name,",
input.year, ".student.demographics.race_ethnicity.white,",
input.year, ".student.demographics.race_ethnicity.black,",
input.year, ".student.demographics.race_ethnicity.hispanic,",
input.year, ".student.demographics.race_ethnicity.asian,",
input.year, ".student.demographics.race_ethnicity.aian,",
input.year, ".student.demographics.race_ethnicity.nhpi,",
input.year, ".student.demographics.race_ethnicity.two_or_more,",
input.year, ".student.demographics.race_ethnicity.non_resident_alien,",
input.year, ".student.demographics.race_ethnicity.unknown,",
input.year, ".student.demographics.race_ethnicity.white_non_hispanic,",
input.year, ".student.demographics.race_ethnicity.black_non_hispanic,",
input.year, ".student.demographics.race_ethnicity.asian_pacific_islander"
)
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data) #merging the current state data with the current page data
}
return(state.data)
}
library(jsonlite)
library(dplyr)
library(httr)
source('api_key.R')
setwd("~/INFO201/info201-ab5/scripts")
setwd("~/INFO201/info201-ab5")
source('api_key.R')
GetRaceData <- function(input.year) {
base.uri <- 'https://api.data.gov/ed/collegescorecard/v1/schools/'
query.params <- list(api_key = api.key, fields = "school.name", school.state = "WA")
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
state.data <- data.frame() #empty dataframe
#get total number of pages by dividing total data and num of data per page
total.pages <- trunc(body.data$metadata$total / body.data$metadata$per_page)
#for loop to each page and add that page's data into state.data
for(p in 1:total.pages) {
query.params$fields <- paste0("school.name,",
input.year, ".student.demographics.race_ethnicity.white,",
input.year, ".student.demographics.race_ethnicity.black,",
input.year, ".student.demographics.race_ethnicity.hispanic,",
input.year, ".student.demographics.race_ethnicity.asian,",
input.year, ".student.demographics.race_ethnicity.aian,",
input.year, ".student.demographics.race_ethnicity.nhpi,",
input.year, ".student.demographics.race_ethnicity.two_or_more,",
input.year, ".student.demographics.race_ethnicity.non_resident_alien,",
input.year, ".student.demographics.race_ethnicity.unknown,",
input.year, ".student.demographics.race_ethnicity.white_non_hispanic,",
input.year, ".student.demographics.race_ethnicity.black_non_hispanic,",
input.year, ".student.demographics.race_ethnicity.asian_pacific_islander"
)
query.params$page <- p
response <- GET(base.uri, query = query.params)
content <- content(response, "text")
body.data <- fromJSON(content) #extract and parse
page.data <- flatten(body.data$results)
state.data <- rbind(state.data, page.data) #merging the current state data with the current page data
}
return(state.data)
}
state.data <- GetRaceData(2015)
state.data <- GetRaceData('2015')
state.data <- GetRaceData(2015)
