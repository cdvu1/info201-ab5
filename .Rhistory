BuildScatter(iris, "sepal.Length", "Petal.Width", "Species", title="Iris Plot")
source("./scripts/BuildScatter.R")
install.packages(janeausten)
install.packages(janeaustenr)
install.packages("janeaustenr")
library(janeaustenr)
books <- austen.books()
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(janeaustenr)
library(tidytext)
install.packages("tidytext")
library(dplyr)
library(stringr)
library(ggplot2)
num.books <- length(unique(books$book))
books <- austen.books()
books <- austen_books()
num.books <- length(unique(books$book))
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(line = max(lines)) %>%
select(book)
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(line == max(lines)) %>%
select(book)
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(lines == max(lines)) %>%
select(book)
common.words <- word.list %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
word.list <- books %>%
unnest_tokens(word, text)
install.packages("janeaustenr")
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
books <- austen_books()
num.books <- length(unique(books$book))
books %>%
group_by(book) %>%
summarize(lines = n()) %>%
filter(lines == max(lines)) %>%
select(book)
word.list <- books %>%
unnest_tokens(word, text)
common.words <- word.list %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
View(word.list)
View(word.list)
View(common.words)
View(common.words)
no.stop.words <- all.words %>%
anti_join(stop_words, by = 'word')
no.stop.words <- all.words %>%
anti_join(stop_words, by = 'word')
all.words <- word.list %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
no.stop.words <- all.words %>%
anti_join(stop_words, by = 'word')
View(no.stop.words)
View(no.stop.words)
no.stop.words %>%
filter(count > 500) %>%
mutate(word = reorder(word,count)) %>%
ggplot(aes(word, count)) +
geom_col() +
coord_flip()
no.stop.words
shiny::runApp('INFO201/a8-rachelvuu')
shiny::runApp('INFO201/final-project')
library(jsonlite)
library(dplyr)
library(httr)
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/info201-ab5')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
pie.data <- GetData('2015') %>%
filter(school.name == "Seattle University")
row.list <- split(pie.data, seq(1(pie.data)))
pie.data <- GetData('2015') %>%
filter(school.name == "Seattle University")
row.list <- split(pie.data, nrow(pie.data))
row.list
runApp('INFO201/final-project')
runApp('INFO201/final-project')
View(row.list)
runApp('INFO201/final-project')
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
row.list
View(row.list)
runApp('INFO201/final-project')
runApp('INFO201/final-project')
runApp('INFO201/final-project')
pie.data
View(pie.data)
pie.data <- GetData(input$year) %>%
filter(school.name == input$school)
library(dplyr)
library(shiny)
library(plotly)
library(RColorBrewer)
source("ethnicity.R")
setwd("~/INFO201/final-project")
source("ethnicity.R")
shinyServer(function(input, output) {
# Rachel pie chart place holder
output$piechart <- renderPlotly({
pie.data <- GetData(input$year) %>%
filter(school.name == input$school)
#row.list <- split(pie.data, nrow(pie.data))
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(9, "YlOrRd"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
pie.data
View(pie.data)
View(pie.data)
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(dplyr)
library(shiny)
library(plotly)
library(RColorBrewer)
source("ethnicity.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Rachel pie chart place holder
output$piechart <- renderPlotly({
pie.data <- GetData('2014') %>%
filter(school.name == 'Shoreline College')
#row.list <- split(pie.data, nrow(pie.data))
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(9, "YlOrRd"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
View(pie.data)
View(pie.data)
pie.data <- GetData('2014') %>%
filter(school.name == 'Highline College')
runApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(dplyr)
library(shiny)
library(plotly)
library(RColorBrewer)
source("ethnicity.R")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Rachel pie chart place holder
output$piechart <- renderPlotly({
pie.data <- GetData(input$year) %>%
filter(school.name == input$school)
#row.list <- split(pie.data, nrow(pie.data))
row.list <- unname(unlist(pie.data[1,]))
data.frame(t(row.list))
# Make chart
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(9, "YlOrRd"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
})
runApp()
runApp()
colorRampPalette()
plot_ly(pie.data, labels = ~colnames(pie.data), values = ~row.list, type = 'pie',
marker = list(colors = colorRampPalette(brewer.pal(12, "Set3"))(100))) %>%
layout(title = "Percentages by Race",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
runApp()
runApp('~/INFO201/info201-ab5')
